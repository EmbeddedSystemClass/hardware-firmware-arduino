
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <title>Temperature</title>
<script>
    const GRAPH_TOP = 25;
    const GRAPH_LEFT = 50;
    const GRAPH_WIDTH = 20 * 25;
    const GRAPH_HEIGHT = 13 * 25;
    
    const GRAPH_MARGIN_PY = 25;
    const GRAPH_MARGIN_PX = 25;
    const GRAPH_GRID_PY = 25;
    const GRAPH_GRID_PX = 25;
    const GRAPH_ZERO_PY = GRAPH_TOP + GRAPH_MARGIN_PY + 10 * GRAPH_GRID_PY;
    
    
    var data = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
    var svgNS = "http://www.w3.org/2000/svg";  
    
    function Init()
    {	
        DrawChart();
        IntervalComboInit();
        //GetTemperature();
        UpdateGraphDummy();
    }
    
    function DrawChart()
    {
        DrawGrid();
        InitPath();
    }
    
    function InitPath()
    {
        for(var i = 0; i < 20; i++) {
            data[i] = 0;
        } 
        
        var gPath = document.createElementNS(svgNS,"g");
        gPath.setAttributeNS(null, "class","surfaces");
        
        var path = document.createElementNS(svgNS,"path");
        path.setAttributeNS(null,"id","path");
        path.setAttributeNS(null,"class","first_set");
               
        var pathAttrib = "M" + (GRAPH_LEFT + GRAPH_MARGIN_PX) + ", " + GRAPH_ZERO_PY;                
        for(var i = 0; i < 21; i++) {            
            pathAttrib += " L0, 0";            
        }        
        pathAttrib += " Z";
        
        path.setAttributeNS(null,"d", pathAttrib);
        gPath.appendChild(path);
        
        // circles
        var gCircles = document.createElementNS(svgNS,"g");
        gCircles.setAttributeNS(null, "class","first_set points");
        gCircles.setAttributeNS(null, "data-setname", "Our first data set");
        
        var x = 45;
        for(var i = 0; i < 20; i++) {
            var circle = document.createElementNS(svgNS,"circle")
            circle.setAttributeNS(null,"id","c" + i);
            circle.setAttributeNS(null,"cx",x);
            circle.setAttributeNS(null,"cy",75);
            circle.setAttributeNS(null,"r",5);
            circle.setAttributeNS(null,"visibility","hidden");
            gCircles.appendChild(circle);
            x += GRAPH_GRID_PX;
        }
        
        document.getElementById("temp-graph").appendChild(gPath);        
        document.getElementById("temp-graph").appendChild(gCircles);
    }
    
    function DrawGrid()
    {
        var gGrid = document.createElementNS(svgNS,"g");
        gGrid.setAttributeNS(null, "class","grid x-grid");
        gGrid.setAttributeNS(null, "id", "xGrid");
        
        // draw vertical lines
        var x = GRAPH_LEFT + GRAPH_MARGIN_PX;
        for(var i = 0; i < 20; i++) {            
            var line = document.createElementNS(svgNS,"line");
            line.setAttributeNS(null,"x1",x);
            line.setAttributeNS(null,"x2",x);
            line.setAttributeNS(null,"y1",GRAPH_TOP + GRAPH_MARGIN_PY);        
            line.setAttributeNS(null,"y2",GRAPH_TOP + GRAPH_HEIGHT + GRAPH_MARGIN_PY);
            gGrid.appendChild(line);
            x += GRAPH_GRID_PX;
        }
        
        // draw horizontal lines
        var y = GRAPH_TOP + GRAPH_MARGIN_PY;
        for(var i = 0; i < 14; i++) {            
            var line = document.createElementNS(svgNS,"line");
            line.setAttributeNS(null,"x1", GRAPH_LEFT + GRAPH_MARGIN_PX);
            line.setAttributeNS(null,"x2", GRAPH_LEFT + GRAPH_WIDTH);
            line.setAttributeNS(null,"y1", y);        
            line.setAttributeNS(null,"y2", y);
            gGrid.appendChild(line);
            y += GRAPH_GRID_PY;
        }
        
        // draw x axis
        var xAxis = document.createElementNS(svgNS,"g");
        xAxis.setAttributeNS(null, "class","labels x-labels");
        xAxis.setAttributeNS(null, "id", "xAxisLabels");
        
        x = GRAPH_LEFT + GRAPH_MARGIN_PX;
        for(var i = 1; i < 21; i++) {            
            var text = document.createElementNS(svgNS,"text");
            text.setAttributeNS(null,"x", x);
            text.setAttributeNS(null,"y", GRAPH_TOP + GRAPH_HEIGHT + 2 * GRAPH_MARGIN_PY);         
            text.textContent = i;
            xAxis.appendChild(text);
            x += GRAPH_GRID_PX;
        }
        
        // draw y axis
        var yAxis = document.createElementNS(svgNS,"g");
        yAxis.setAttributeNS(null, "class","labels y-labels");
        yAxis.setAttributeNS(null, "id", "yAxisLabels");
        
        y = GRAPH_TOP + GRAPH_MARGIN_PY + 5;
        for(var i = 100; i > -40; i -= 10) {            
            var text = document.createElementNS(svgNS,"text");
            text.setAttributeNS(null,"x", GRAPH_LEFT);
            text.setAttributeNS(null,"y", y);            
            text.textContent = i;
            yAxis.appendChild(text);
            y += GRAPH_GRID_PY;
        }

        var text = document.createElementNS(svgNS,"text");
        text.setAttributeNS(null,"x", GRAPH_LEFT);
        text.setAttributeNS(null,"y", GRAPH_TOP);            
        text.textContent = "°C";
        yAxis.appendChild(text);
            
        document.getElementById("temp-graph").appendChild(gGrid);
        document.getElementById("temp-graph").appendChild(xAxis);
        document.getElementById("temp-graph").appendChild(yAxis);
    }
    
    function GetTemperature()
    {
        var request = new XMLHttpRequest();

        request.onreadystatechange = function()
        {
            if (this.readyState == 4) {
                if (this.status == 200) {
                    if (this.responseXML != null) {
                        for(var i = 0; i < 20; i++) {
                            data[i] = this.responseXML.getElementsByTagName('analog')[i].childNodes[0].nodeValue;
                        }
                        UpdateGraph();
                    }
                }
            }
        }

        request.open("GET", "temperatur_data", true);
        request.send(null);
        
        setTimeout("GetTemperature()", 3000);
    }
    
    function UpdateGraph()
    {
        var path = document.getElementById("path");
        var segments = path.pathSegList;
        
        var x = GRAPH_LEFT + GRAPH_MARGIN_PX;
        
        segments.getItem(0).y = GRAPH_ZERO_PY;
        segments.getItem(0).x = x;
        
        segments.getItem(21).y = GRAPH_ZERO_PY;
        segments.getItem(21).x = GRAPH_LEFT + GRAPH_WIDTH;
            
        for(var i = 0; i < 20; i++) {
            var y = data[i] * -2.5 + GRAPH_ZERO_PY;
            var circle = document.getElementById("c" + i);			
            circle.setAttributeNS(null, "cy", y);
            circle.setAttributeNS(null, "cx", x);
            if(data[i] != GRAPH_ZERO_PY)
                circle.setAttributeNS(null,"visibility","visible");
            
            segments.getItem(i+1).y = parseInt(y);
            segments.getItem(i+1).x = x;
            
            x += GRAPH_GRID_PX;
        }        
        
        for(var i = 0; i < 21; i++) {
            data[i] = data[i + 1];
        }        
    }
    
    function UpdateGraphDummy()
    {
        var path = document.getElementById("path");
        var segments = path.pathSegList;
        
        var x = GRAPH_LEFT + GRAPH_MARGIN_PX;
        
        segments.getItem(0).y = GRAPH_ZERO_PY;
        segments.getItem(0).x = x;
        
        segments.getItem(21).y = GRAPH_ZERO_PY;
        segments.getItem(21).x = GRAPH_LEFT + GRAPH_WIDTH;
            
        for(var i = 0; i < 20; i++) {
            var y = data[i] * -2.5 + GRAPH_ZERO_PY;
            var circle = document.getElementById("c" + i);			
            circle.setAttributeNS(null, "cy", y);
            circle.setAttributeNS(null, "cx", x);
	    
            if(data[i] != GRAPH_ZERO_PY)
                circle.setAttributeNS(null,"visibility","visible");
            
            segments.getItem(i+1).y = parseInt(y);
            segments.getItem(i+1).x = x;
            
            x += GRAPH_GRID_PX;
        }


        data[20] = 20;//Math.random() * 100;
        
        for(var i = 0; i < 21; i++) {
            data[i] = data[i + 1];
        }

        setTimeout("UpdateGraphDummy()", 3000);
    }
    
    function OnStartLog()
    {
        var request = new XMLHttpRequest();
        request.open("GET", "start_log", true);
        request.send(null);
    }
    
    function OnStoppLog()
    {
        var request = new XMLHttpRequest();
        request.open("GET", "stopp_log", true);
        request.send(null);
    }
    
    function OnRefreshLogFilesButtonClick()
    {
      var request = new XMLHttpRequest();
  
      request.onreadystatechange = function()
      {
          if (this.readyState == 4) {
              if (this.status == 200) {
                  if (this.responseXML != null) {                      
                      var select = document.getElementById("logFiles");
                      select.innerHTML = "";
                      for(var i = 0; i < this.responseXML.getElementsByTagName('dir')[0].childElementCount; i++) {
                        var fileName = this.responseXML.getElementsByTagName('dir')[0].children[i].innerHTML;
                        var option = document.createElement("option");
                        option.innerHTML = fileName;
                        select.add( option );
                      }
                  }
              }
          }
      }

      request.open("GET", "dir", true);
      request.send(null);
    }
    
    function OnDownloadLogFileButtonClick()
    {
      var select = document.getElementById("logFiles");
      var idx = select.selectedIndex;
      if(idx >= 0) {
        var fileName = select.options[idx].value;
        OnDownloadLogFile(fileName);
      }     
    }
    
    function onError(e) {
      console.log('Error', e);
    }
    
    function OnDownloadLogFile(fileName)
    {
      //window.open("file/" + fileName,'Download'); 
      
      window.location.href = "file/" + fileName;
    }
    
    function OnRefreshState() {
      // todo
    }
    
    function IntervalComboInit()
    {
      var intervalInputBox = document.getElementById("intervalInput");
      var intervalComboBox = document.getElementById("intervalCombo");
      var idx = intervalComboBox.selectedIndex;
      var content = intervalComboBox.options[idx].value;
      if(intervalInputBox.value == "")
          intervalInputBox.value = content;	
    }

    function IntervalComboOnChange()
    {      
      var intervalComboBox = document.getElementById("intervalCombo");  
      var idx = intervalComboBox.selectedIndex;
      
      if(idx >= 0) {
        var intervalInputBox = document.getElementById("intervalInput");
        var content = intervalComboBox.options[idx].value;
        intervalInputBox.value = content;
      }

      var request = new XMLHttpRequest();       
      request.open("GET", "set_loginterval=" + content, true);
      request.send(null);
    }
    
    function intervalInputHandle(e){
      if(e.keyCode === 13){
        var intervalInputBox = document.getElementById("intervalInput");
        var content = intervalInputBox.value;
        var request = new XMLHttpRequest();       
        request.open("GET", "set_loginterval=" + content, true);
        request.send(null);
      }

      return false;
    }
</script>
  <style type="text/css">
      body {
        background-color: #b8b8b8;
      }
      svg.graph {	    
        height: 400px;
        width: 600px;
      }
      svg.graph .grid {
        stroke: white;
        stroke-dasharray: 1 2;
        stroke-width: 1;
      }
      svg.graph .points {
        stroke: white;
        stroke-width: 3;
      }
      svg.graph .first_set {
        fill: #000000;
      }
      svg.graph .surfaces {
        fill-opacity: 0.5;
      }
      svg.graph .grid.double {
        stroke-opacity: 0.4;
      }
      svg.graph .labels {
        font-family: Arial;
        font-size: 14px;
        kerning: 1;
      }
      svg.graph .labels.x-labels {
        text-anchor: middle;
      }
      svg.graph .labels.y-labels {
        text-anchor: end;       
      }

    fieldset {
        padding-top:10px;
        padding-bottom:10px;
        font-family: Arial;
        font-size: 12px;
        kerning: 1;
        width: 600px;
        border:1px solid #666;
        border-radius:4px;		    
    }
        
        
  </style>
</head>
<body onload="Init()">
  <fieldset name="graph">
      <legend>Temperature</legend>
      <svg id = 'temp-graph' class='graph' version='1.1' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns='http://www.w3.org/2000/svg'>
  </fieldset>
   <p/>
  <fieldset name="logging">
      <legend>Logging</legend>
      <table style="width:100%">
        <tr>
          <td>
              <input name="START_LOG" value="Start Log" type="button" onclick="OnStartLog()">
              <input name="STOPP_LOG" value="Stopp Log" type="button" onclick="OnStoppLog()">
          </td>
          <td>
              <label>Interval[s]:</label>		
              <input type="text" id="intervalInput" name="intervalInput" style="width: 50px" onkeypress="intervalInputHandle(event)"/>
              <select id="intervalCombo" name="intervalCombo" onChange="IntervalComboOnChange()">
                  <option value="1">1s</option>
                  <option value="60">1m</option>
                  <option value="600">10m</option>
                  <option value="3600">1h</option>
              </select>    
          </td> 
          <td>			
              <label>State:</label>	
              <label id = "stateLabel"><font color="red"><b>Off</b></font></label>              
          </td>
          <td>
              <input name="refreshState" value="Refresh" type="button" onclick="OnRefreshState()">
          </td>          
        </tr> 
      </table>
  </fieldset>
  <p/>
  <fieldset name="files">
      <legend>Files</legend>
      <select id="logFiles" name="logFiles" size="5" style="width: 300px">            
      </select>
      <p/>        
      <input name="refreshButton" value="Refresh" type="button" onclick="OnRefreshLogFilesButtonClick()">
      <input name="downloadButton" value="Download" type="button" onclick="OnDownloadLogFileButtonClick()">        
  </fieldset> 
</body>
</html>








