
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <title>Temperature</title>
<script>
    const LOG_DATA_SIZE     = 24;

    const GRAPH_TOP         = 25;
    const GRAPH_LEFT        = 50;
    const GRAPH_WIDTH       = LOG_DATA_SIZE * 25;
    const GRAPH_HEIGHT      = 13 * 25;

    const GRAPH_MARGIN_PY   = 25;
    const GRAPH_MARGIN_PX   = 25;
    const GRAPH_GRID_PY     = 25;
    const GRAPH_GRID_PX     = 25;
    const GRAPH_ZERO_PY     = GRAPH_TOP + GRAPH_MARGIN_PY + 10 * GRAPH_GRID_PY;

    var data = new Array(LOG_DATA_SIZE );
    var svgNS = "http://www.w3.org/2000/svg";

    function Init()
    {
      DrawChart();
      IntervalComboInit();

      OnRefreshState();
      GetTemperature();
      //UpdateGraphDummy();

      var downloadButton = document.getElementById("downloadButton");
      downloadButton.disabled = true;
    }

    function DrawChart()
    {
        DrawGrid();
        InitPath();
    }

    function InitPath()
    {
        for(var i = 0; i < LOG_DATA_SIZE; i++) {
            data[i] = 0;
        }

        var gPath = document.createElementNS(svgNS,"g");
        gPath.setAttributeNS(null, "class","surfaces");

        var path = document.createElementNS(svgNS,"path");
        path.setAttributeNS(null,"id","path");
        path.setAttributeNS(null,"class","first_set");

        var pathAttrib = "M" + (GRAPH_LEFT + GRAPH_MARGIN_PX) + ", " + GRAPH_ZERO_PY;
        for(var i = 0; i < LOG_DATA_SIZE + 1; i++) {
            pathAttrib += " L0, 0";
        }
        pathAttrib += " Z";

        path.setAttributeNS(null,"d", pathAttrib);
        gPath.appendChild(path);

        // circles
        var gCircles = document.createElementNS(svgNS,"g");
        gCircles.setAttributeNS(null, "class","first_set points");
        gCircles.setAttributeNS(null, "data-setname", "Our first data set");

        var x = 45;
        for(var i = 0; i < LOG_DATA_SIZE; i++) {
            var circle = document.createElementNS(svgNS,"circle")
            circle.setAttributeNS(null,"id","c" + i);
            circle.setAttributeNS(null,"cx",x);
            circle.setAttributeNS(null,"cy",75);
            circle.setAttributeNS(null,"r",5);
            circle.setAttributeNS(null,"visibility","hidden");
            gCircles.appendChild(circle);
            x += GRAPH_GRID_PX;
        }

        document.getElementById("temp-graph").appendChild(gPath);
        document.getElementById("temp-graph").appendChild(gCircles);
    }

    function DrawGrid()
    {
        var gGrid = document.createElementNS(svgNS,"g");
        gGrid.setAttributeNS(null, "class","grid x-grid");
        gGrid.setAttributeNS(null, "id", "xGrid");

        // draw vertical lines
        var x = GRAPH_LEFT + GRAPH_MARGIN_PX;
        for(var i = 0; i < LOG_DATA_SIZE; i++) {
            var line = document.createElementNS(svgNS,"line");
            line.setAttributeNS(null,"x1",x);
            line.setAttributeNS(null,"x2",x);
            line.setAttributeNS(null,"y1",GRAPH_TOP + GRAPH_MARGIN_PY);
            line.setAttributeNS(null,"y2",GRAPH_TOP + GRAPH_HEIGHT + GRAPH_MARGIN_PY);
            gGrid.appendChild(line);
            x += GRAPH_GRID_PX;
        }

        // draw horizontal lines
        var y = GRAPH_TOP + GRAPH_MARGIN_PY;
        for(var i = 0; i < 14; i++) {
            var line = document.createElementNS(svgNS,"line");
            line.setAttributeNS(null,"x1", GRAPH_LEFT + GRAPH_MARGIN_PX);
            line.setAttributeNS(null,"x2", GRAPH_LEFT + GRAPH_WIDTH);
            line.setAttributeNS(null,"y1", y);
            line.setAttributeNS(null,"y2", y);
            gGrid.appendChild(line);
            y += GRAPH_GRID_PY;
        }

        // draw x axis
        var xAxis = document.createElementNS(svgNS,"g");
        xAxis.setAttributeNS(null, "class","labels x-labels");
        xAxis.setAttributeNS(null, "id", "xAxisLabels");

        x = GRAPH_LEFT + GRAPH_MARGIN_PX;
        for(var i = 1; i < LOG_DATA_SIZE + 1; i++) {
            var text = document.createElementNS(svgNS,"text");
            text.setAttributeNS(null,"x", x);
            text.setAttributeNS(null,"y", GRAPH_TOP + GRAPH_HEIGHT + 2 * GRAPH_MARGIN_PY);
            text.textContent = i;
            xAxis.appendChild(text);
            x += GRAPH_GRID_PX;
        }

        // draw y axis
        var yAxis = document.createElementNS(svgNS,"g");
        yAxis.setAttributeNS(null, "class","labels y-labels");
        yAxis.setAttributeNS(null, "id", "yAxisLabels");

        y = GRAPH_TOP + GRAPH_MARGIN_PY + 5;
        for(var i = 100; i > -40; i -= 10) {
            var text = document.createElementNS(svgNS,"text");
            text.setAttributeNS(null,"x", GRAPH_LEFT);
            text.setAttributeNS(null,"y", y);
            text.textContent = i;
            yAxis.appendChild(text);
            y += GRAPH_GRID_PY;
        }

        var text = document.createElementNS(svgNS,"text");
        text.setAttributeNS(null,"x", GRAPH_LEFT);
        text.setAttributeNS(null,"y", GRAPH_TOP);
        text.textContent = "°C";
        yAxis.appendChild(text);

        // Cursor
        var cursorVLine = document.createElementNS(svgNS,"line");
        cursorVLine.setAttributeNS(null,"class","cursor");
        cursorVLine.setAttributeNS(null,"id","cursorVLine");
        cursorVLine.setAttributeNS(null,"x1",x);
        cursorVLine.setAttributeNS(null,"x2",x);
        cursorVLine.setAttributeNS(null,"y1",GRAPH_TOP + GRAPH_MARGIN_PY);
        cursorVLine.setAttributeNS(null,"y2",GRAPH_TOP + GRAPH_HEIGHT + GRAPH_MARGIN_PY);
        cursorVLine.setAttributeNS(null,"visibility","hidden");
        gGrid.appendChild(cursorVLine);

        var cursorHLine = document.createElementNS(svgNS,"line");
        cursorHLine.setAttributeNS(null,"class","cursor");
        cursorHLine.setAttributeNS(null,"id","cursorHLine");
        cursorHLine.setAttributeNS(null,"x1", GRAPH_LEFT + GRAPH_MARGIN_PX);
        cursorHLine.setAttributeNS(null,"x2", GRAPH_LEFT + GRAPH_WIDTH);
        cursorHLine.setAttributeNS(null,"y1", 0);
        cursorHLine.setAttributeNS(null,"y2", 0);
        cursorHLine.setAttributeNS(null,"visibility","hidden");
        gGrid.appendChild(cursorHLine);

        var cursorText = document.createElementNS(svgNS,"text");
        cursorText.setAttributeNS(null,"id", "cursorText");
        cursorText.setAttributeNS(null,"x", GRAPH_LEFT + GRAPH_MARGIN_PX);
        cursorText.setAttributeNS(null,"y", GRAPH_TOP);
        cursorText.setAttributeNS(null,"visibility","hidden");
        cursorText.textContent = 0;
        xAxis.appendChild(cursorText);

        document.getElementById("temp-graph").appendChild(gGrid);
        document.getElementById("temp-graph").appendChild(xAxis);
        document.getElementById("temp-graph").appendChild(yAxis);
    }

    function GetTemperature()
    {
        var request = new XMLHttpRequest();

        request.onreadystatechange = function()
        {
            if (this.readyState == 4) {
                if (this.status == 200) {
                    if (this.responseXML != null) {
                        for(var i = 0; i < LOG_DATA_SIZE; i++) {
                            data[i] = parseFloat(this.responseXML.getElementsByTagName('analog')[i].childNodes[0].nodeValue);
                        }
                        UpdateGraph();
                    }
                }
            }
        }

        request.open("GET", "temperatur_data", true);
        request.send(null);

        setTimeout("GetTemperature()", 3000);
    }

    function UpdateGraph()
    {
        var path = document.getElementById("path");
        var segments = path.pathSegList;

        var x = GRAPH_LEFT + GRAPH_MARGIN_PX;

        segments.getItem(0).y = GRAPH_ZERO_PY;
        segments.getItem(0).x = x;

        segments.getItem(LOG_DATA_SIZE + 1).y = GRAPH_ZERO_PY;
        segments.getItem(LOG_DATA_SIZE + 1).x = GRAPH_LEFT + GRAPH_WIDTH;

        for(var i = 0; i < LOG_DATA_SIZE; i++) {
            var y = data[i] * -2.5 + GRAPH_ZERO_PY;
            var circle = document.getElementById("c" + i);
            circle.setAttributeNS(null, "cy", y);
            circle.setAttributeNS(null, "cx", x);
            if(data[i] != GRAPH_ZERO_PY)
                circle.setAttributeNS(null,"visibility","visible");

            segments.getItem(i+1).y = parseInt(y);
            segments.getItem(i+1).x = x;

            x += GRAPH_GRID_PX;
        }
    }

    function UpdateGraphDummy()
    {
        var path = document.getElementById("path");
        var segments = path.pathSegList;

        var x = GRAPH_LEFT + GRAPH_MARGIN_PX;

        segments.getItem(0).y = GRAPH_ZERO_PY;
        segments.getItem(0).x = x;

        segments.getItem(LOG_DATA_SIZE + 1).y = GRAPH_ZERO_PY;
        segments.getItem(LOG_DATA_SIZE + 1).x = GRAPH_LEFT + GRAPH_WIDTH;

        for(var i = 0; i < LOG_DATA_SIZE; i++) {
            data[i] = Math.random() * 100;
            var y = data[i] * -2.5 + GRAPH_ZERO_PY;
            var circle = document.getElementById("c" + i);
            circle.setAttributeNS(null, "cy", y);
            circle.setAttributeNS(null, "cx", x);

            if(data[i] != GRAPH_ZERO_PY)
                circle.setAttributeNS(null,"visibility","visible");

            segments.getItem(i+1).y = parseInt(y);
            segments.getItem(i+1).x = x;

            x += GRAPH_GRID_PX;
        }


        /*data[LOG_DATA_SIZE] = 20;//Math.random() * 100;

        for(var i = 0; i < 21; i++) {
            data[i] = data[i + 1];
        }*/

        //setTimeout("UpdateGraphDummy()", 3000);
    }

    function OnStartLog()
    {
        var request = new XMLHttpRequest();
        request.open("GET", "start_log", true);
        request.send(null);

        setTimeout("OnRefreshState()", 500);
        setTimeout("OnRefreshLogFilesButtonClick()", 1000);
    }

    function OnStoppLog()
    {
        var request = new XMLHttpRequest();
        request.open("GET", "stopp_log", true);
        request.send(null);

        setTimeout("OnRefreshState()", 500);
    }

    function OnRefreshLogFilesButtonClick()
    {
      var request = new XMLHttpRequest();

      request.onreadystatechange = function()
      {
          if (this.readyState == 4) {
              if (this.status == 200) {
                  if (this.responseXML != null) {
                      var select = document.getElementById("logFiles");
                      select.innerHTML = "";
                      for(var i = 0; i < this.responseXML.getElementsByTagName('dir')[0].childElementCount; i++) {
                        var fileName = this.responseXML.getElementsByTagName('dir')[0].children[i].innerHTML;
                        if(fileName.toLowerCase().indexOf(".log") > 0) {
                          var option = document.createElement("option");
                          option.innerHTML = fileName;
                          select.add( option );
                        }
                      }
                  }
              }
          }
      }

      request.open("GET", "dir", true);
      request.send(null);
    }

    function OnDownloadLogFileButtonClick()
    {
      var select = document.getElementById("logFiles");
      var idx = select.selectedIndex;
      if(idx >= 0) {
        var fileName = select.options[idx].value;
        OnDownloadLogFile(fileName);
      }
    }

    function OnDeleteLogFileButtonClick()
    {
      var select = document.getElementById("logFiles");
      var idx = select.selectedIndex;
      if(idx >= 0) {
        var fileName = select.options[idx].value;

        var request = new XMLHttpRequest();
        request.open("GET", "delete/" + fileName, true);
        request.send(null);

        setTimeout("OnRefreshLogFilesButtonClick()", 500);
      }
    }

    function OnDownloadLogFile(fileName)
    {
      //window.open("file/" + fileName,'Download');

      window.location.href = "file/" + fileName;
    }

    function OnRefreshState() {
      var request = new XMLHttpRequest();

      request.onreadystatechange = function()
      {
          if (this.readyState == 4) {
              if (this.status == 200) {
                  if (this.responseXML != null) {
                    // Logstate
                    var logState = this.responseXML.getElementsByTagName('state')[0].childNodes[0].innerHTML == "1";
                    var stateLabel = document.getElementById("stateLabel");
                    if(logState) {
                      stateLabel.innerHTML = "On";
                    } else {
                      stateLabel.innerHTML = "Off";
                    }

                    // Interval
                    var intervalInputBox = document.getElementById("intervalInput");
                    intervalInputBox.value = parseInt(this.responseXML.getElementsByTagName('state')[0].childNodes[1].innerHTML);

                    // Enable Delete button
                    var deleteFileButton = document.getElementById("deleteButton");
                    deleteFileButton.disabled  = logState;

                    // System date time
                    var systemDateTimeLabel = document.getElementById("systemDateTimeLabel");
                    systemDateTimeLabel.innerHTML  = this.responseXML.getElementsByTagName('state')[0].childNodes[2].innerHTML;
                  }
              }
          }
      }

      request.open("GET", "system_state", true);
      request.send(null);
    }

    function OnRefreshDateTimeButtonClick() {
      var request = new XMLHttpRequest();

      request.onreadystatechange = function()
      {
          if (this.readyState == 4) {
              if (this.status == 200) {
                  if (this.responseXML != null) {
                    // System date time
                    var systemDateTimeLabel = document.getElementById("systemDateTimeLabel");
                    systemDateTimeLabel.innerHTML  = this.responseXML.getElementsByTagName('state')[0].childNodes[2].innerHTML;
                  }
              }
          }
      }

      request.open("GET", "system_state", true);
      request.send(null);
    }

    function OnMouseMove() {
      var cursorVLine = document.getElementById("cursorVLine");
      var cursorHLine = document.getElementById("cursorHLine");
      var cursorText = document.getElementById("cursorText");

      if(cursorVLine) {
        var graphXOffset = GRAPH_LEFT + GRAPH_MARGIN_PX;
        var x = event.offsetX;

        if((x > graphXOffset && x < (GRAPH_LEFT + GRAPH_WIDTH)) && event.buttons > 0) {
          cursorVLine.setAttributeNS(null,"visibility","visible");
          cursorHLine.setAttributeNS(null,"visibility","visible");
          cursorText.setAttributeNS(null,"visibility","visible");

          cursorVLine.setAttributeNS(null,"x1", x);
          cursorVLine.setAttributeNS(null,"x2", x);
          cursorText.setAttributeNS(null,"x", x);

          var cursorText = document.getElementById("cursorText");
          var n = parseInt((x - graphXOffset) / GRAPH_GRID_PX);

          var y1 = data[n];
          var y2 = data[n + 1];

          var m = (y2 - y1) / GRAPH_GRID_PX;

          var xs = (x - graphXOffset) - (n * GRAPH_GRID_PX);

          var interpolTemp = parseFloat(m * xs + y1);

          var y = interpolTemp * -2.5 + GRAPH_ZERO_PY;

          cursorHLine.setAttributeNS(null,"y1", y);
          cursorHLine.setAttributeNS(null,"y2", y);

          cursorText.textContent = interpolTemp.toFixed(1) + "°C";
        } else {
          cursorVLine.setAttributeNS(null,"visibility","hidden");
          cursorHLine.setAttributeNS(null,"visibility","hidden");
          cursorText.setAttributeNS(null,"visibility","hidden");
        }
      }
    }

    function IntervalComboInit()
    {
      var intervalInputBox = document.getElementById("intervalInput");
      var intervalComboBox = document.getElementById("intervalCombo");
      var idx = intervalComboBox.selectedIndex;
      var content = intervalComboBox.options[idx].value;
      if(intervalInputBox.value == "")
          intervalInputBox.value = content;
    }

    function OnIntervalComboOnChange()
    {
      var intervalComboBox = document.getElementById("intervalCombo");
      var idx = intervalComboBox.selectedIndex;

      if(idx >= 0) {
        var intervalInputBox = document.getElementById("intervalInput");
        var content = intervalComboBox.options[idx].value;
        intervalInputBox.value = content;
      }

      /*
      var request = new XMLHttpRequest();
      request.open("GET", "set_loginterval=" + content, true);
      request.send(null);
      */
    }

    function OnSetIntervalButtonClick()
    {
        var intervalInputBox = document.getElementById("intervalInput");
        var content = intervalInputBox.value;
        var request = new XMLHttpRequest();
        request.open("GET", "set_loginterval=" + content, true);
        request.send(null);
    }

    function OnFilesSelectChange()
    {
      var select = document.getElementById("logFiles");
      var idx = select.selectedIndex;
      var downloadButton = document.getElementById("downloadButton");
      downloadButton.disabled = idx < 0;
    }

</script>
  <style type="text/css">
      body {
        background-color: #b8b8b8;
      }
      svg.graph {
        height: 400px;
        width: 700px;
      }
      svg.graph .grid {
        stroke: white;
        stroke-dasharray: 1 2;
        stroke-width: 1;
      }

      svg.graph .cursor {
        stroke: black;
        stroke-dasharray: 0;
        stroke-width: 1;
      }

      svg.graph .points {
        stroke: white;
        stroke-width: 3;
      }
      svg.graph .first_set {
        fill: #000000;
      }
      svg.graph .surfaces {
        fill-opacity: 0.5;
      }
      svg.graph .grid.double {
        stroke-opacity: 0.4;
      }
      svg.graph .labels {
        font-family: Arial;
        font-size: 14px;
        kerning: 1;
      }
      svg.graph .labels.x-labels {
        text-anchor: middle;
      }
      svg.graph .labels.y-labels {
        text-anchor: end;
      }

      svg.graph {
        user-select: none;
        -khtml-user-select: none;
        -o-user-select: none;
        -moz-user-select: -moz-none;
        -webkit-user-select: none;
      }

    fieldset {
        padding-top:10px;
        padding-bottom:10px;
        font-family: Arial;
        font-size: 12px;
        kerning: 1;
        width: 600px;
        border:1px solid #666;
        border-radius:4px;
    }


  </style>
</head>
<body onload="Init()">
  <fieldset name="graph">
      <legend>Temperature</legend>
      <svg id = 'temp-graph' class='graph' version='1.1' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns='http://www.w3.org/2000/svg' onmousemove='OnMouseMove()'>
  </fieldset>
   <p/>
  <fieldset name="logging" style="width: 700px">
      <legend>Logging</legend>
      <label>Interval[s]:</label>
      <input type="text" id="intervalInput" name="intervalInput" style="width: 50px"/>
      <select id="intervalCombo" name="intervalCombo" onChange="OnIntervalComboOnChange()">
          <option value="0">--</option>
          <option value="1">1s</option>
          <option value="60">1m</option>
          <option value="600">10m</option>
          <option value="3600">1h</option>
      </select>
       <input name="setIntervalButton" value="Set" type="button" onclick="OnSetIntervalButtonClick()">
  </fieldset>
  <p/>
  <fieldset name="files" style="width: 700px">
      <legend>Log files</legend>
      <input name="START_LOG" value="Start Log" type="button" onclick="OnStartLog()">
      <input name="STOPP_LOG" value="Stopp Log" type="button" onclick="OnStoppLog()">
      <label style="margin:10px">State:</label>
      <label id = "stateLabel">Off</label>
       <p/>
      <select id="logFiles" name="logFiles" size="5" style="width: 300px" onChange="OnFilesSelectChange()">         
      </select>
      <p/>
      <input name="refreshButton" value="Refresh" type="button" onclick="OnRefreshLogFilesButtonClick()">
      <input name="deleteButton" value="Delete" type="button" id = "deleteButton" onclick="OnDeleteLogFileButtonClick()">
      <input name="downloadButton" value="Download" type="button" id = "downloadButton" onclick="OnDownloadLogFileButtonClick()">
  </fieldset>
   <p/>
  <fieldset name="dateTime" style="width: 700px">
      <legend>System date time</legend>
      <label id = "systemDateTimeLabel"></label>
      <input name="refreshButton" value="Refresh" type="button" onclick="OnRefreshDateTimeButtonClick()">
  </fieldset>
</body>
</html>
